@using Blog.Pages;
@using Blog.Infrastructure;
@using Blog.Entities.V1;
@using Blog.Common;
@model State
@{
    ViewBag.Title = "State Detail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-content-wrapper">
    <div class="page-content">
        <ul class="page-breadcrumb breadcrumb">
            <li>
                @Html.ActionLink("Dashboard", "Index", "Dashboard", new { area = "" }, null)
            </li>
            <li>
                @Html.ActionLink("State", "Index", "State", new { area = "" }, null)
            </li>
            <li>
                <span class="active" href="#">State Details</span>
            </li>
        </ul>
        <div class="row">
            <div class="col-md-12">
                <div class="portlet light portlet-fit portlet-form bordered">
                    <div class="portlet-title">
                        <div class="caption">
                            <i class="icon-user"></i>
                            <span class="caption-State sbold uppercase">State Details</span>
                        </div>
                    </div>
                    <div class="portlet-body">
                        @using (Html.BeginForm(Actions.AddEditState, Controllers.State, FormMethod.Post, new { area = "", returnUrl = "", @id = "frmAddEditState", @class = "form-horizontal", enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(model => model.Id)

                            <div class="form-body">
                                <div class="alert alert-danger display-hide">
                                    <button class="close" data-close="alert"></button> You have some form errors. Please check below.
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-md-3">
                                        Name
                                        <span class="required"> * </span>
                                    </label>
                                    <div class="col-md-4">
                                        @Html.TextBoxFor(model => model.Name, new { @Id = "Fname", @class = "form-control", placeholder = "Enter Name" })
                                    </div>
                                </div>
                                <div class="form-actions">
                                    <div class="row">
                                        <div class="col-md-offset-3 col-md-9">
                                            <button type="submit" class="btn green" id="button">Submit</button>
                                            <a href="@Url.Action(Actions.Index, Controllers.State, new { Area = "" })" title="Cancel" class="btn grey-salsa btn-outline"> Cancel</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        <!-- END FORM-->
                    </div>
                </div>
                <!-- END VALIDATION STATES-->
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var FormValidation = function () {
        // basic validation
        var handleValidation1 = function () {

            var form1 = $('#frmAddEditState');
            var error1 = $('.alert-danger', form1);
            //var success1 = $('.alert-success', form1);

            form1.validate({
                errorElement: 'span', //default input error message container
                errorClass: 'help-block help-block-error', // default input error message class
                focusInvalid: false, // do not focus the last invalid input
                ignore: "",  // validate all fields including form hidden input
                rules: {
                    Name: {
                        required: true
                    },
                },

                invalidHandler: function (event, validator) { //display error alert on form submit
                    //success1.hide();
                    error1.show();
                    App.scrollTo(error1, -200);
                },

                errorPlacement: function (error, element) { // render error placement for each input type
                    var cont = $(element).parent('.input-group');
                    if (cont.size() > 0) {
                        cont.after(error);
                    } else {
                        element.after(error);
                    }
                },

                highlight: function (element) { // hightlight error inputs
                    $(element)
                        .closest('.form-group').addClass('has-error'); // set error class to the control group
                },

                unhighlight: function (element) { // revert the change done by hightlight
                    $(element)
                        .closest('.form-group').removeClass('has-error'); // set error class to the control group
                },

                success: function (label) {
                    label
                        .closest('.form-group').removeClass('has-error'); // set success class to the control group
                },

                submitHandler: function (form) {
                    $("#frmAddEditState").val((atob($("#frmAddEditState").val())));
                    form.submit();
                }
            });
        }

        return {
            //main function to initiate the module
            init: function () {
                handleValidation1();
            }
        };
    }();


    jQuery(document).ready(function () {
        FormValidation.init();
    });
</script>


